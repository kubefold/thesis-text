commit d3fe06a1730331e621778a18d148985a19b83b2f
Author: Mateusz Woźniak <matisiek11@gmail.com>
Date:   Thu Jul 10 11:20:48 2025 +0200

    feat: expand bibliography and enhance state section with detailed analysis of traditional bioinformatics workflow orchestration tools and their limitations

diff --git a/bibliografia.bib b/bibliografia.bib
index 82da897..e7965a1 100644
--- a/bibliografia.bib
+++ b/bibliografia.bib
@@ -425,4 +425,66 @@
     title = {Simultaneous Modeling of Protein Conformation and Dynamics via Autoregression},
     journal = {arXiv preprint arXiv:2505.17478},
     year = {2025}
+}
+
+@article{workflows_review_nature,
+    author = {Laura Wratten and Andreas Wilm and Jonathan Göke},
+    title = {Reproducible, scalable, and shareable analysis pipelines with bioinformatics workflow managers},
+    journal = {Nature Methods},
+    volume = {18},
+    number = {10},
+    pages = {1161--1168},
+    year = {2021},
+    doi = {10.1038/s41592-021-01254-9}
+}
+
+@article{nextflow,
+    author = {Paolo Di Tommaso and Maria Chatzou and Evan W. Floden and Pablo Prieto Barja and Emilio Palumbo and Cedric Notredame},
+    title = {Nextflow enables reproducible computational workflows},
+    journal = {Nature Biotechnology},
+    volume = {35},
+    number = {4},
+    pages = {316--319},
+    year = {2017},
+    doi = {10.1038/nbt.3820}
+}
+
+@article{snakemake,
+    author = {Johannes Köster and Sven Rahmann},
+    title = {Snakemake—a scalable bioinformatics workflow engine},
+    journal = {Bioinformatics},
+    volume = {28},
+    number = {19},
+    pages = {2520--2522},
+    year = {2012},
+    doi = {10.1093/bioinformatics/bts480}
+}
+
+@article{galaxy,
+    author = {Jeremy Goecks and Anton Nekrutenko and James Taylor and The Galaxy Team},
+    title = {Galaxy: a comprehensive approach for supporting accessible, reproducible, and transparent computational research in the life sciences},
+    journal = {Genome Biology},
+    volume = {11},
+    number = {8},
+    pages = {R86},
+    year = {2010},
+    doi = {10.1186/gb-2010-11-8-r86}
+}
+
+@article{wdl_cromwell,
+    author = {Kiran Voss and Jeff Gentry and Geraldine Van der Auwera},
+    title = {Full-stack genomics pipelining with GATK4 + WDL + Cromwell},
+    journal = {F1000Research},
+    volume = {6},
+    pages = {1381},
+    year = {2017},
+    doi = {10.12688/f1000research.12359.1}
+}
+
+@article{cwl,
+    author = {Peter Amstutz and Michael R. Crusoe and Nebojša Tijanić and Brad Chapman and John Chilton and Michael Heuer and Andrey Kartashov and Dan Leehr and Hervé Ménager and Maya Nedeljkovich and Matt Scales and Stian Soiland-Reyes and Luka Stojanovic},
+    title = {Common Workflow Language, v1.0},
+    journal = {Zenodo},
+    year = {2016},
+    doi = {10.6084/m9.figshare.3115156.v2}
 }
\ No newline at end of file
diff --git a/state.tex b/state.tex
index 0ccda38..d22c497 100644
--- a/state.tex
+++ b/state.tex
@@ -636,7 +636,52 @@ The review concludes that despite recent breakthroughs, there remains ample room
 \section{Automation of Bioinformatics Workflows}
 
 The scientific literature proposes a range of patterns and tools for managing the infrastructure required for machine learning computations, with particular emphasis on cloud-based solutions and container orchestration.
-Below are two selected articles discussing the deployment of bioinformatics applications on a computational cluster, as well as a project that automates these approaches.
+To understand the current landscape, it is essential to examine both traditional workflow orchestration tools and specific deployment approaches that have emerged in recent years.
+
+\subsection{Traditional Workflow Orchestration Tools}
+
+While specialized bioinformatics platforms provide powerful capabilities, it is important to examine the broader landscape of workflow orchestration tools that have become standard in the field.
+These tools, while effective for workflow definition and execution, reveal critical limitations when it comes to infrastructure management -- a gap that operator-based solutions like KubeFold are designed to address.
+
+The bioinformatics community has adopted several workflow management systems, each with distinct characteristics and approaches~\cite{workflows_review_nature}.
+
+**Nextflow** is a dataflow-based workflow manager that has gained significant popularity in the bioinformatics community.
+It provides excellent documentation, supports both Conda environments and container technologies, and offers good integration with cloud platforms.
+Nextflow uses a dataflow programming model where processes are connected via their outputs and inputs, enabling automatic parallelization~\cite{nextflow}.
+The nf-core community has created a substantial collection of peer-reviewed bioinformatics pipelines, demonstrating the tool's adoption and utility.
+
+**Snakemake** follows a Make-like approach where users specify output files they want to build, and the system determines the necessary steps to create them.
+It is Python-based, making it accessible to researchers familiar with Python, and provides strong support for reproducibility through built-in environment management~\cite{snakemake}.
+Snakemake offers excellent support for incremental builds and re-entrancy, allowing workflows to resume from interruption points.
+
+**Galaxy** provides a web-based platform that abstracts workflow complexity behind a graphical user interface.
+It enables researchers without programming expertise to construct and execute complex bioinformatics workflows~\cite{galaxy}.
+Galaxy's strength lies in its accessibility and the extensive tool ecosystem, with thousands of pre-configured bioinformatics tools available through its interface.
+
+**Workflow Description Language (WDL)** and its execution engine **Cromwell** offer a declarative approach to workflow specification.
+WDL provides a standardized way to describe workflows that can be executed across different environments, promoting portability~\cite{wdl_cromwell}.
+The approach separates workflow logic from execution details, enabling the same workflow to run on various computing platforms.
+
+**Common Workflow Language (CWL)** represents an effort to standardize workflow descriptions across different execution engines.
+CWL workflows can be executed by multiple workflow runners, providing workflow portability across different computational environments~\cite{cwl}.
+
+Despite their sophistication in workflow orchestration, these traditional tools exhibit significant limitations regarding infrastructure management that highlight the value of operator-based approaches:
+
+**Manual Infrastructure Provisioning**: All of these workflow systems require pre-existing computational infrastructure.
+Users must manually provision clusters, configure networking, set up storage systems, and manage resource allocation before executing workflows.
+This places a substantial operational burden on researchers and requires specialized DevOps knowledge.
+
+**Limited Cloud-Native Integration**: While these tools can execute on cloud platforms, they do not leverage cloud-native technologies like Kubernetes operators for automated infrastructure management.
+They treat cloud resources as static infrastructure rather than dynamically managed, declarative resources.
+
+**Lack of Automated Scaling**: Traditional workflow managers provide limited support for automatic infrastructure scaling in response to workload demands.
+Resource allocation is typically configured at deployment time rather than adjusted dynamically based on queue depth or resource utilization.
+
+**Complex Deployment Requirements**: Deploying these workflow systems in production environments requires significant configuration effort.
+Setting up proper cluster managers, configuring security policies, implementing backup strategies, and ensuring high availability demands extensive operational expertise.
+
+**Separation of Concerns**: These tools excel at workflow orchestration but delegate infrastructure concerns to external systems.
+This separation, while following good architectural principles, results in complex operational overhead when researchers need to manage both workflow logic and underlying infrastructure.
 
 \subsection{Foldy}
 
@@ -677,6 +722,15 @@ Thanks to integration with the Tapis ML Hub, users can search for, deploy, and u
 GPU provisioning, workflow orchestration, and model deployment are fragmented across various APIs and services, making end-to-end automation challenging for small teams or institutions without dedicated infrastructure engineers.
 While powerful in production settings, the architecture lacks a unified interface for researchers to independently manage job submissions, monitoring, and data without DevOps support.
 
+\subsection{The Value of Operator-Based Approaches}
+
+The limitations of traditional workflow orchestration tools demonstrate the value proposition of operator-based solutions like KubeFold.
+By integrating workflow management with infrastructure automation through Kubernetes operators, KubeFold addresses the operational gap that exists between workflow definition and infrastructure management.
+
+Where existing solutions require DevOps expertise for proper deployment, KubeFold abstracts infrastructure complexity behind declarative resource definitions.
+Where conventional workflow managers treat infrastructure as static, KubeFold provides dynamic resource management that adapts to computational demands.
+
+This integration represents a fundamental shift from treating infrastructure as a prerequisite to treating it as an automatically managed component of the scientific computing platform.
 
 \section{Summary and Identified Gaps}
 
